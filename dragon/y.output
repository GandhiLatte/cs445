Terminals unused in grammar

   COMMA
   EQ
   NE
   LT
   LE
   GT
   GE
   PLUS
   MINUS
   OR
   STAR
   SLASH
   AND
   EXP
   CARROT
   ARRAY_ACCESS
   FUNCTION_CALL
   PROCEDURE_CALL
   PARAMLIST


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    2 identifier_list: ID
    3                | identifier_list ',' ID

    4 declarations: declarations VAR identifier_list ':' type ';'
    5             | %empty

    6 type: standard_type
    7     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    8 standard_type: INTEGER
    9              | REAL

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   11                        | %empty

   12 subprogram_declaration: subprogram_head declarations compound_statement

   13 $@1: %empty

   14 subprogram_head: FUNCTION ID $@1 arguments ':' standard_type ';'
   15                | PROCEDURE ID

   16 arguments: '(' parameter_list ')'
   17          | %empty

   18 parameter_list: identifier_list ':' type
   19               | parameter_list ';' identifier_list ':' type

   20 compound_statement: BBEGIN optional_statements END

   21 optional_statements: statement_list
   22                    | %empty

   23 statement_list: statement
   24               | statement_list ';' statement

   25 statement: variable ASSIGNOP expression
   26          | procedure_statement
   27          | compound_statement
   28          | IF expression THEN statement ELSE statement
   29          | WHILE expression DO statement
   30          | FOR statement TO expression DO statement

   31 variable: ID
   32         | ID '[' expression ']'

   33 procedure_statement: ID
   34                    | ID '(' expression_list ')'

   35 expression_list: expression
   36                | expression_list ',' expression

   37 expression: simple_expression
   38           | simple_expression RELOP simple_expression

   39 simple_expression: term
   40                  | ADDOP term
   41                  | simple_expression ADDOP term

   42 term: factor
   43     | term MULOP factor

   44 factor: ID
   45       | ID '[' expression ']'
   46       | ID '(' expression_list ')'
   47       | INUM
   48       | RNUM
   49       | '(' expression ')'
   50       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 16 34 46 49
')' (41) 1 16 34 46 49
',' (44) 3 36
'.' (46) 1
':' (58) 4 14 18 19
';' (59) 1 4 10 14 19 24
'[' (91) 7 32 45
']' (93) 7 32 45
error (256)
PROGRAM (258) 1
BBEGIN (259) 20
END (260) 20
VAR (261) 4
PROCEDURE (262) 15
FUNCTION (263) 14
ARRAY (264) 7
OF (265) 7
INTEGER (266) 8
REAL (267) 9
DOTDOT (268) 7
NOT (269) 50
COMMA (270)
ID (271) 1 2 3 14 15 31 32 33 34 44 45 46
INUM (272) 7 47
RNUM (273) 48
ASSIGNOP (274) 25
RELOP (275) 38
EQ (276)
NE (277)
LT (278)
LE (279)
GT (280)
GE (281)
ADDOP (282) 40 41
PLUS (283)
MINUS (284)
OR (285)
MULOP (286) 43
STAR (287)
SLASH (288)
AND (289)
EXP (290)
CARROT (291)
IF (292) 28
THEN (293) 28
ELSE (294) 28
WHILE (295) 29
DO (296) 29 30
FOR (297) 30
TO (298) 30
ARRAY_ACCESS (299)
FUNCTION_CALL (300)
PROCEDURE_CALL (301)
PARAMLIST (302)


Nonterminals, with rules where they appear

$accept (56)
    on left: 0
program (57)
    on left: 1, on right: 0
identifier_list (58)
    on left: 2 3, on right: 1 3 4 18 19
declarations (59)
    on left: 4 5, on right: 1 4 12
type (60)
    on left: 6 7, on right: 4 18 19
standard_type (61)
    on left: 8 9, on right: 6 7 14
subprogram_declarations (62)
    on left: 10 11, on right: 1 10
subprogram_declaration (63)
    on left: 12, on right: 10
subprogram_head (64)
    on left: 14 15, on right: 12
$@1 (65)
    on left: 13, on right: 14
arguments (66)
    on left: 16 17, on right: 14
parameter_list (67)
    on left: 18 19, on right: 16 19
compound_statement (68)
    on left: 20, on right: 1 12 27
optional_statements (69)
    on left: 21 22, on right: 20
statement_list (70)
    on left: 23 24, on right: 21 24
statement (71)
    on left: 25 26 27 28 29 30, on right: 23 24 28 29 30
variable (72)
    on left: 31 32, on right: 25
procedure_statement (73)
    on left: 33 34, on right: 26
expression_list (74)
    on left: 35 36, on right: 34 36 46
expression (75)
    on left: 37 38, on right: 25 28 29 30 32 35 36 45 49
simple_expression (76)
    on left: 39 40 41, on right: 37 38 41
term (77)
    on left: 42 43, on right: 39 40 41 43
factor (78)
    on left: 44 45 46 47 48 49 50, on right: 42 43 50


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: ID .

    $default  reduce using rule 2 (identifier_list)


State 7

    1 program: PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    3 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    3 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 11


State 10

    1 program: PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 3 (identifier_list)


State 12

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    4 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    4 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 15


State 14

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   10 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN     shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    FUNCTION   shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 21


State 15

    3 identifier_list: identifier_list . ',' ID
    4 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 22


State 16

   20 compound_statement: BBEGIN . optional_statements END

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    $default  reduce using rule 22 (optional_statements)

    compound_statement   go to state 27
    optional_statements  go to state 28
    statement_list       go to state 29
    statement            go to state 30
    variable             go to state 31
    procedure_statement  go to state 32


State 17

   15 subprogram_head: PROCEDURE . ID

    ID  shift, and go to state 33


State 18

   14 subprogram_head: FUNCTION . ID $@1 arguments ':' standard_type ';'

    ID  shift, and go to state 34


State 19

   10 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 35


State 20

   12 subprogram_declaration: subprogram_head . declarations compound_statement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 36


State 21

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 37


State 22

    4 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 41
    standard_type  go to state 42


State 23

   31 variable: ID .
   32         | ID . '[' expression ']'
   33 procedure_statement: ID .
   34                    | ID . '(' expression_list ')'

    '('  shift, and go to state 43
    '['  shift, and go to state 44

    ASSIGNOP  reduce using rule 31 (variable)
    $default  reduce using rule 33 (procedure_statement)


State 24

   28 statement: IF . expression THEN statement ELSE statement

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 51
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 25

   29 statement: WHILE . expression DO statement

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 55
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 26

   30 statement: FOR . statement TO expression DO statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 56
    variable             go to state 31
    procedure_statement  go to state 32


State 27

   27 statement: compound_statement .

    $default  reduce using rule 27 (statement)


State 28

   20 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 57


State 29

   21 optional_statements: statement_list .
   24 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 58

    $default  reduce using rule 21 (optional_statements)


State 30

   23 statement_list: statement .

    $default  reduce using rule 23 (statement_list)


State 31

   25 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 59


State 32

   26 statement: procedure_statement .

    $default  reduce using rule 26 (statement)


State 33

   15 subprogram_head: PROCEDURE ID .

    $default  reduce using rule 15 (subprogram_head)


State 34

   14 subprogram_head: FUNCTION ID . $@1 arguments ':' standard_type ';'

    $default  reduce using rule 13 ($@1)

    $@1  go to state 60


State 35

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 10 (subprogram_declarations)


State 36

    4 declarations: declarations . VAR identifier_list ':' type ';'
   12 subprogram_declaration: subprogram_head declarations . compound_statement

    BBEGIN  shift, and go to state 16
    VAR     shift, and go to state 13

    compound_statement  go to state 61


State 37

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 1 (program)


State 38

    7 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 62


State 39

    8 standard_type: INTEGER .

    $default  reduce using rule 8 (standard_type)


State 40

    9 standard_type: REAL .

    $default  reduce using rule 9 (standard_type)


State 41

    4 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 63


State 42

    6 type: standard_type .

    $default  reduce using rule 6 (type)


State 43

   34 procedure_statement: ID '(' . expression_list ')'

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression_list    go to state 64
    expression         go to state 65
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 44

   32 variable: ID '[' . expression ']'

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 66
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 45

   50 factor: NOT . factor

    NOT   shift, and go to state 45
    ID    shift, and go to state 46
    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    '('   shift, and go to state 50

    factor  go to state 67


State 46

   44 factor: ID .
   45       | ID . '[' expression ']'
   46       | ID . '(' expression_list ')'

    '('  shift, and go to state 68
    '['  shift, and go to state 69

    $default  reduce using rule 44 (factor)


State 47

   47 factor: INUM .

    $default  reduce using rule 47 (factor)


State 48

   48 factor: RNUM .

    $default  reduce using rule 48 (factor)


State 49

   40 simple_expression: ADDOP . term

    NOT   shift, and go to state 45
    ID    shift, and go to state 46
    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    '('   shift, and go to state 50

    term    go to state 70
    factor  go to state 54


State 50

   49 factor: '(' . expression ')'

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 71
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 51

   28 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 72


State 52

   37 expression: simple_expression .
   38           | simple_expression . RELOP simple_expression
   41 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 73
    ADDOP  shift, and go to state 74

    $default  reduce using rule 37 (expression)


State 53

   39 simple_expression: term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 75

    $default  reduce using rule 39 (simple_expression)


State 54

   42 term: factor .

    $default  reduce using rule 42 (term)


State 55

   29 statement: WHILE expression . DO statement

    DO  shift, and go to state 76


State 56

   30 statement: FOR statement . TO expression DO statement

    TO  shift, and go to state 77


State 57

   20 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 20 (compound_statement)


State 58

   24 statement_list: statement_list ';' . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 78
    variable             go to state 31
    procedure_statement  go to state 32


State 59

   25 statement: variable ASSIGNOP . expression

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 79
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 60

   14 subprogram_head: FUNCTION ID $@1 . arguments ':' standard_type ';'

    '('  shift, and go to state 80

    $default  reduce using rule 17 (arguments)

    arguments  go to state 81


State 61

   12 subprogram_declaration: subprogram_head declarations compound_statement .

    $default  reduce using rule 12 (subprogram_declaration)


State 62

    7 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 82


State 63

    4 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 4 (declarations)


State 64

   34 procedure_statement: ID '(' expression_list . ')'
   36 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 83
    ','  shift, and go to state 84


State 65

   35 expression_list: expression .

    $default  reduce using rule 35 (expression_list)


State 66

   32 variable: ID '[' expression . ']'

    ']'  shift, and go to state 85


State 67

   50 factor: NOT factor .

    $default  reduce using rule 50 (factor)


State 68

   46 factor: ID '(' . expression_list ')'

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression_list    go to state 86
    expression         go to state 65
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 69

   45 factor: ID '[' . expression ']'

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 87
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 70

   40 simple_expression: ADDOP term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 75

    $default  reduce using rule 40 (simple_expression)


State 71

   49 factor: '(' expression . ')'

    ')'  shift, and go to state 88


State 72

   28 statement: IF expression THEN . statement ELSE statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 89
    variable             go to state 31
    procedure_statement  go to state 32


State 73

   38 expression: simple_expression RELOP . simple_expression

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    simple_expression  go to state 90
    term               go to state 53
    factor             go to state 54


State 74

   41 simple_expression: simple_expression ADDOP . term

    NOT   shift, and go to state 45
    ID    shift, and go to state 46
    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    '('   shift, and go to state 50

    term    go to state 91
    factor  go to state 54


State 75

   43 term: term MULOP . factor

    NOT   shift, and go to state 45
    ID    shift, and go to state 46
    INUM  shift, and go to state 47
    RNUM  shift, and go to state 48
    '('   shift, and go to state 50

    factor  go to state 92


State 76

   29 statement: WHILE expression DO . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 93
    variable             go to state 31
    procedure_statement  go to state 32


State 77

   30 statement: FOR statement TO . expression DO statement

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 94
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 78

   24 statement_list: statement_list ';' statement .

    $default  reduce using rule 24 (statement_list)


State 79

   25 statement: variable ASSIGNOP expression .

    $default  reduce using rule 25 (statement)


State 80

   16 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 95
    parameter_list   go to state 96


State 81

   14 subprogram_head: FUNCTION ID $@1 arguments . ':' standard_type ';'

    ':'  shift, and go to state 97


State 82

    7 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 98


State 83

   34 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 34 (procedure_statement)


State 84

   36 expression_list: expression_list ',' . expression

    NOT    shift, and go to state 45
    ID     shift, and go to state 46
    INUM   shift, and go to state 47
    RNUM   shift, and go to state 48
    ADDOP  shift, and go to state 49
    '('    shift, and go to state 50

    expression         go to state 99
    simple_expression  go to state 52
    term               go to state 53
    factor             go to state 54


State 85

   32 variable: ID '[' expression ']' .

    $default  reduce using rule 32 (variable)


State 86

   36 expression_list: expression_list . ',' expression
   46 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 100
    ','  shift, and go to state 84


State 87

   45 factor: ID '[' expression . ']'

    ']'  shift, and go to state 101


State 88

   49 factor: '(' expression ')' .

    $default  reduce using rule 49 (factor)


State 89

   28 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 102


State 90

   38 expression: simple_expression RELOP simple_expression .
   41 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 74

    $default  reduce using rule 38 (expression)


State 91

   41 simple_expression: simple_expression ADDOP term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 75

    $default  reduce using rule 41 (simple_expression)


State 92

   43 term: term MULOP factor .

    $default  reduce using rule 43 (term)


State 93

   29 statement: WHILE expression DO statement .

    $default  reduce using rule 29 (statement)


State 94

   30 statement: FOR statement TO expression . DO statement

    DO  shift, and go to state 103


State 95

    3 identifier_list: identifier_list . ',' ID
   18 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 104


State 96

   16 arguments: '(' parameter_list . ')'
   19 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 105
    ';'  shift, and go to state 106


State 97

   14 subprogram_head: FUNCTION ID $@1 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 107


State 98

    7 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 108


State 99

   36 expression_list: expression_list ',' expression .

    $default  reduce using rule 36 (expression_list)


State 100

   46 factor: ID '(' expression_list ')' .

    $default  reduce using rule 46 (factor)


State 101

   45 factor: ID '[' expression ']' .

    $default  reduce using rule 45 (factor)


State 102

   28 statement: IF expression THEN statement ELSE . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 109
    variable             go to state 31
    procedure_statement  go to state 32


State 103

   30 statement: FOR statement TO expression DO . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25
    FOR     shift, and go to state 26

    compound_statement   go to state 27
    statement            go to state 110
    variable             go to state 31
    procedure_statement  go to state 32


State 104

   18 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 111
    standard_type  go to state 42


State 105

   16 arguments: '(' parameter_list ')' .

    $default  reduce using rule 16 (arguments)


State 106

   19 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 112


State 107

   14 subprogram_head: FUNCTION ID $@1 arguments ':' standard_type . ';'

    ';'  shift, and go to state 113


State 108

    7 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 114


State 109

   28 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 28 (statement)


State 110

   30 statement: FOR statement TO expression DO statement .

    $default  reduce using rule 30 (statement)


State 111

   18 parameter_list: identifier_list ':' type .

    $default  reduce using rule 18 (parameter_list)


State 112

    3 identifier_list: identifier_list . ',' ID
   19 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 115


State 113

   14 subprogram_head: FUNCTION ID $@1 arguments ':' standard_type ';' .

    $default  reduce using rule 14 (subprogram_head)


State 114

    7 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 116


State 115

   19 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 38
    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    type           go to state 117
    standard_type  go to state 42


State 116

    7 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 39
    REAL     shift, and go to state 40

    standard_type  go to state 118


State 117

   19 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 118

    7 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 7 (type)
