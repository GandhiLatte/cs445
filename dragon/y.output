Terminals unused in grammar

   COMMA
   EQ
   NE
   LT
   LE
   GT
   GE
   PLUS
   MINUS
   OR
   STAR
   SLASH
   AND
   ARRAY_ACCESS
   FUNCTION_CALL
   PROCEDURE_CALL
   PARAMLIST


Grammar

    0 $accept: program $end

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    2 identifier_list: ID
    3                | identifier_list ',' ID

    4 declarations: declarations VAR identifier_list ':' type ';'
    5             | %empty

    6 type: standard_type
    7     | ARRAY '[' INUM DOTDOT INUM ']' OF standard_type

    8 standard_type: INTEGER
    9              | REAL

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';'
   11                        | %empty

   12 subprogram_declaration: subprogram_head declarations compound_statement

   13 $@1: %empty

   14 subprogram_head: FUNCTION ID $@1 arguments ':' standard_type ';'

   15 $@2: %empty

   16 subprogram_head: PROCEDURE ID $@2 arguments ';'

   17 arguments: '(' parameter_list ')'
   18          | %empty

   19 parameter_list: identifier_list ':' type
   20               | parameter_list ';' identifier_list ':' type

   21 compound_statement: BBEGIN optional_statements END

   22 optional_statements: statement_list
   23                    | %empty

   24 statement_list: statement
   25               | statement_list ';' statement

   26 statement: variable ASSIGNOP expression
   27          | procedure_statement
   28          | compound_statement
   29          | IF expression THEN statement ELSE statement
   30          | WHILE expression DO statement

   31 variable: ID
   32         | ID '[' expression ']'

   33 procedure_statement: ID
   34                    | ID '(' expression_list ')'

   35 expression_list: expression
   36                | expression_list ',' expression

   37 expression: simple_expression
   38           | simple_expression RELOP simple_expression

   39 simple_expression: term
   40                  | ADDOP term
   41                  | simple_expression ADDOP term

   42 term: factor
   43     | term MULOP factor

   44 factor: ID
   45       | ID '[' expression ']'
   46       | ID '(' expression_list ')'
   47       | INUM
   48       | RNUM
   49       | '(' expression ')'
   50       | NOT factor


Terminals, with rules where they appear

$end (0) 0
'(' (40) 1 17 34 46 49
')' (41) 1 17 34 46 49
',' (44) 3 36
'.' (46) 1
':' (58) 4 14 19 20
';' (59) 1 4 10 14 16 20 25
'[' (91) 7 32 45
']' (93) 7 32 45
error (256)
PROGRAM (258) 1
BBEGIN (259) 21
END (260) 21
VAR (261) 4
PROCEDURE (262) 16
FUNCTION (263) 14
ARRAY (264) 7
OF (265) 7
INTEGER (266) 8
REAL (267) 9
DOTDOT (268) 7
NOT (269) 50
COMMA (270)
ID (271) 1 2 3 14 16 31 32 33 34 44 45 46
INUM (272) 7 47
RNUM (273) 48
ASSIGNOP (274) 26
RELOP (275) 38
EQ (276)
NE (277)
LT (278)
LE (279)
GT (280)
GE (281)
ADDOP (282) 40 41
PLUS (283)
MINUS (284)
OR (285)
MULOP (286) 43
STAR (287)
SLASH (288)
AND (289)
IF (290) 29
THEN (291) 29
ELSE (292) 29
WHILE (293) 30
DO (294) 30
ARRAY_ACCESS (295)
FUNCTION_CALL (296)
PROCEDURE_CALL (297)
PARAMLIST (298)


Nonterminals, with rules where they appear

$accept (52)
    on left: 0
program (53)
    on left: 1, on right: 0
identifier_list (54)
    on left: 2 3, on right: 1 3 4 19 20
declarations (55)
    on left: 4 5, on right: 1 4 12
type (56)
    on left: 6 7, on right: 4 19 20
standard_type (57)
    on left: 8 9, on right: 6 7 14
subprogram_declarations (58)
    on left: 10 11, on right: 1 10
subprogram_declaration (59)
    on left: 12, on right: 10
subprogram_head (60)
    on left: 14 16, on right: 12
$@1 (61)
    on left: 13, on right: 14
$@2 (62)
    on left: 15, on right: 16
arguments (63)
    on left: 17 18, on right: 14 16
parameter_list (64)
    on left: 19 20, on right: 17 20
compound_statement (65)
    on left: 21, on right: 1 12 28
optional_statements (66)
    on left: 22 23, on right: 21
statement_list (67)
    on left: 24 25, on right: 22 25
statement (68)
    on left: 26 27 28 29 30, on right: 24 25 29 30
variable (69)
    on left: 31 32, on right: 26
procedure_statement (70)
    on left: 33 34, on right: 27
expression_list (71)
    on left: 35 36, on right: 34 36 46
expression (72)
    on left: 37 38, on right: 26 29 30 32 35 36 45 49
simple_expression (73)
    on left: 39 40 41, on right: 37 38 41
term (74)
    on left: 42 43, on right: 39 40 41 43
factor (75)
    on left: 44 45 46 47 48 49 50, on right: 42 43 50


State 0

    0 $accept: . program $end

    PROGRAM  shift, and go to state 1

    program  go to state 2


State 1

    1 program: PROGRAM . ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 3


State 2

    0 $accept: program . $end

    $end  shift, and go to state 4


State 3

    1 program: PROGRAM ID . '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    '('  shift, and go to state 5


State 4

    0 $accept: program $end .

    $default  accept


State 5

    1 program: PROGRAM ID '(' . identifier_list ')' ';' declarations subprogram_declarations compound_statement '.'

    ID  shift, and go to state 6

    identifier_list  go to state 7


State 6

    2 identifier_list: ID .

    $default  reduce using rule 2 (identifier_list)


State 7

    1 program: PROGRAM ID '(' identifier_list . ')' ';' declarations subprogram_declarations compound_statement '.'
    3 identifier_list: identifier_list . ',' ID

    ')'  shift, and go to state 8
    ','  shift, and go to state 9


State 8

    1 program: PROGRAM ID '(' identifier_list ')' . ';' declarations subprogram_declarations compound_statement '.'

    ';'  shift, and go to state 10


State 9

    3 identifier_list: identifier_list ',' . ID

    ID  shift, and go to state 11


State 10

    1 program: PROGRAM ID '(' identifier_list ')' ';' . declarations subprogram_declarations compound_statement '.'

    $default  reduce using rule 5 (declarations)

    declarations  go to state 12


State 11

    3 identifier_list: identifier_list ',' ID .

    $default  reduce using rule 3 (identifier_list)


State 12

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations . subprogram_declarations compound_statement '.'
    4 declarations: declarations . VAR identifier_list ':' type ';'

    VAR  shift, and go to state 13

    $default  reduce using rule 11 (subprogram_declarations)

    subprogram_declarations  go to state 14


State 13

    4 declarations: declarations VAR . identifier_list ':' type ';'

    ID  shift, and go to state 6

    identifier_list  go to state 15


State 14

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations . compound_statement '.'
   10 subprogram_declarations: subprogram_declarations . subprogram_declaration ';'

    BBEGIN     shift, and go to state 16
    PROCEDURE  shift, and go to state 17
    FUNCTION   shift, and go to state 18

    subprogram_declaration  go to state 19
    subprogram_head         go to state 20
    compound_statement      go to state 21


State 15

    3 identifier_list: identifier_list . ',' ID
    4 declarations: declarations VAR identifier_list . ':' type ';'

    ','  shift, and go to state 9
    ':'  shift, and go to state 22


State 16

   21 compound_statement: BBEGIN . optional_statements END

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25

    $default  reduce using rule 23 (optional_statements)

    compound_statement   go to state 26
    optional_statements  go to state 27
    statement_list       go to state 28
    statement            go to state 29
    variable             go to state 30
    procedure_statement  go to state 31


State 17

   16 subprogram_head: PROCEDURE . ID $@2 arguments ';'

    ID  shift, and go to state 32


State 18

   14 subprogram_head: FUNCTION . ID $@1 arguments ':' standard_type ';'

    ID  shift, and go to state 33


State 19

   10 subprogram_declarations: subprogram_declarations subprogram_declaration . ';'

    ';'  shift, and go to state 34


State 20

   12 subprogram_declaration: subprogram_head . declarations compound_statement

    $default  reduce using rule 5 (declarations)

    declarations  go to state 35


State 21

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement . '.'

    '.'  shift, and go to state 36


State 22

    4 declarations: declarations VAR identifier_list ':' . type ';'

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type           go to state 40
    standard_type  go to state 41


State 23

   31 variable: ID .
   32         | ID . '[' expression ']'
   33 procedure_statement: ID .
   34                    | ID . '(' expression_list ')'

    '('  shift, and go to state 42
    '['  shift, and go to state 43

    ASSIGNOP  reduce using rule 31 (variable)
    $default  reduce using rule 33 (procedure_statement)


State 24

   29 statement: IF . expression THEN statement ELSE statement

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 50
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 25

   30 statement: WHILE . expression DO statement

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 54
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 26

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 27

   21 compound_statement: BBEGIN optional_statements . END

    END  shift, and go to state 55


State 28

   22 optional_statements: statement_list .
   25 statement_list: statement_list . ';' statement

    ';'  shift, and go to state 56

    $default  reduce using rule 22 (optional_statements)


State 29

   24 statement_list: statement .

    $default  reduce using rule 24 (statement_list)


State 30

   26 statement: variable . ASSIGNOP expression

    ASSIGNOP  shift, and go to state 57


State 31

   27 statement: procedure_statement .

    $default  reduce using rule 27 (statement)


State 32

   16 subprogram_head: PROCEDURE ID . $@2 arguments ';'

    $default  reduce using rule 15 ($@2)

    $@2  go to state 58


State 33

   14 subprogram_head: FUNCTION ID . $@1 arguments ':' standard_type ';'

    $default  reduce using rule 13 ($@1)

    $@1  go to state 59


State 34

   10 subprogram_declarations: subprogram_declarations subprogram_declaration ';' .

    $default  reduce using rule 10 (subprogram_declarations)


State 35

    4 declarations: declarations . VAR identifier_list ':' type ';'
   12 subprogram_declaration: subprogram_head declarations . compound_statement

    BBEGIN  shift, and go to state 16
    VAR     shift, and go to state 13

    compound_statement  go to state 60


State 36

    1 program: PROGRAM ID '(' identifier_list ')' ';' declarations subprogram_declarations compound_statement '.' .

    $default  reduce using rule 1 (program)


State 37

    7 type: ARRAY . '[' INUM DOTDOT INUM ']' OF standard_type

    '['  shift, and go to state 61


State 38

    8 standard_type: INTEGER .

    $default  reduce using rule 8 (standard_type)


State 39

    9 standard_type: REAL .

    $default  reduce using rule 9 (standard_type)


State 40

    4 declarations: declarations VAR identifier_list ':' type . ';'

    ';'  shift, and go to state 62


State 41

    6 type: standard_type .

    $default  reduce using rule 6 (type)


State 42

   34 procedure_statement: ID '(' . expression_list ')'

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression_list    go to state 63
    expression         go to state 64
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 43

   32 variable: ID '[' . expression ']'

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 65
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 44

   50 factor: NOT . factor

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 49

    factor  go to state 66


State 45

   44 factor: ID .
   45       | ID . '[' expression ']'
   46       | ID . '(' expression_list ')'

    '('  shift, and go to state 67
    '['  shift, and go to state 68

    $default  reduce using rule 44 (factor)


State 46

   47 factor: INUM .

    $default  reduce using rule 47 (factor)


State 47

   48 factor: RNUM .

    $default  reduce using rule 48 (factor)


State 48

   40 simple_expression: ADDOP . term

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 49

    term    go to state 69
    factor  go to state 53


State 49

   49 factor: '(' . expression ')'

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 70
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 50

   29 statement: IF expression . THEN statement ELSE statement

    THEN  shift, and go to state 71


State 51

   37 expression: simple_expression .
   38           | simple_expression . RELOP simple_expression
   41 simple_expression: simple_expression . ADDOP term

    RELOP  shift, and go to state 72
    ADDOP  shift, and go to state 73

    $default  reduce using rule 37 (expression)


State 52

   39 simple_expression: term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 74

    $default  reduce using rule 39 (simple_expression)


State 53

   42 term: factor .

    $default  reduce using rule 42 (term)


State 54

   30 statement: WHILE expression . DO statement

    DO  shift, and go to state 75


State 55

   21 compound_statement: BBEGIN optional_statements END .

    $default  reduce using rule 21 (compound_statement)


State 56

   25 statement_list: statement_list ';' . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 76
    variable             go to state 30
    procedure_statement  go to state 31


State 57

   26 statement: variable ASSIGNOP . expression

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 77
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 58

   16 subprogram_head: PROCEDURE ID $@2 . arguments ';'

    '('  shift, and go to state 78

    $default  reduce using rule 18 (arguments)

    arguments  go to state 79


State 59

   14 subprogram_head: FUNCTION ID $@1 . arguments ':' standard_type ';'

    '('  shift, and go to state 78

    $default  reduce using rule 18 (arguments)

    arguments  go to state 80


State 60

   12 subprogram_declaration: subprogram_head declarations compound_statement .

    $default  reduce using rule 12 (subprogram_declaration)


State 61

    7 type: ARRAY '[' . INUM DOTDOT INUM ']' OF standard_type

    INUM  shift, and go to state 81


State 62

    4 declarations: declarations VAR identifier_list ':' type ';' .

    $default  reduce using rule 4 (declarations)


State 63

   34 procedure_statement: ID '(' expression_list . ')'
   36 expression_list: expression_list . ',' expression

    ')'  shift, and go to state 82
    ','  shift, and go to state 83


State 64

   35 expression_list: expression .

    $default  reduce using rule 35 (expression_list)


State 65

   32 variable: ID '[' expression . ']'

    ']'  shift, and go to state 84


State 66

   50 factor: NOT factor .

    $default  reduce using rule 50 (factor)


State 67

   46 factor: ID '(' . expression_list ')'

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression_list    go to state 85
    expression         go to state 64
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 68

   45 factor: ID '[' . expression ']'

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 86
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 69

   40 simple_expression: ADDOP term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 74

    $default  reduce using rule 40 (simple_expression)


State 70

   49 factor: '(' expression . ')'

    ')'  shift, and go to state 87


State 71

   29 statement: IF expression THEN . statement ELSE statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 88
    variable             go to state 30
    procedure_statement  go to state 31


State 72

   38 expression: simple_expression RELOP . simple_expression

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    simple_expression  go to state 89
    term               go to state 52
    factor             go to state 53


State 73

   41 simple_expression: simple_expression ADDOP . term

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 49

    term    go to state 90
    factor  go to state 53


State 74

   43 term: term MULOP . factor

    NOT   shift, and go to state 44
    ID    shift, and go to state 45
    INUM  shift, and go to state 46
    RNUM  shift, and go to state 47
    '('   shift, and go to state 49

    factor  go to state 91


State 75

   30 statement: WHILE expression DO . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 92
    variable             go to state 30
    procedure_statement  go to state 31


State 76

   25 statement_list: statement_list ';' statement .

    $default  reduce using rule 25 (statement_list)


State 77

   26 statement: variable ASSIGNOP expression .

    $default  reduce using rule 26 (statement)


State 78

   17 arguments: '(' . parameter_list ')'

    ID  shift, and go to state 6

    identifier_list  go to state 93
    parameter_list   go to state 94


State 79

   16 subprogram_head: PROCEDURE ID $@2 arguments . ';'

    ';'  shift, and go to state 95


State 80

   14 subprogram_head: FUNCTION ID $@1 arguments . ':' standard_type ';'

    ':'  shift, and go to state 96


State 81

    7 type: ARRAY '[' INUM . DOTDOT INUM ']' OF standard_type

    DOTDOT  shift, and go to state 97


State 82

   34 procedure_statement: ID '(' expression_list ')' .

    $default  reduce using rule 34 (procedure_statement)


State 83

   36 expression_list: expression_list ',' . expression

    NOT    shift, and go to state 44
    ID     shift, and go to state 45
    INUM   shift, and go to state 46
    RNUM   shift, and go to state 47
    ADDOP  shift, and go to state 48
    '('    shift, and go to state 49

    expression         go to state 98
    simple_expression  go to state 51
    term               go to state 52
    factor             go to state 53


State 84

   32 variable: ID '[' expression ']' .

    $default  reduce using rule 32 (variable)


State 85

   36 expression_list: expression_list . ',' expression
   46 factor: ID '(' expression_list . ')'

    ')'  shift, and go to state 99
    ','  shift, and go to state 83


State 86

   45 factor: ID '[' expression . ']'

    ']'  shift, and go to state 100


State 87

   49 factor: '(' expression ')' .

    $default  reduce using rule 49 (factor)


State 88

   29 statement: IF expression THEN statement . ELSE statement

    ELSE  shift, and go to state 101


State 89

   38 expression: simple_expression RELOP simple_expression .
   41 simple_expression: simple_expression . ADDOP term

    ADDOP  shift, and go to state 73

    $default  reduce using rule 38 (expression)


State 90

   41 simple_expression: simple_expression ADDOP term .
   43 term: term . MULOP factor

    MULOP  shift, and go to state 74

    $default  reduce using rule 41 (simple_expression)


State 91

   43 term: term MULOP factor .

    $default  reduce using rule 43 (term)


State 92

   30 statement: WHILE expression DO statement .

    $default  reduce using rule 30 (statement)


State 93

    3 identifier_list: identifier_list . ',' ID
   19 parameter_list: identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 102


State 94

   17 arguments: '(' parameter_list . ')'
   20 parameter_list: parameter_list . ';' identifier_list ':' type

    ')'  shift, and go to state 103
    ';'  shift, and go to state 104


State 95

   16 subprogram_head: PROCEDURE ID $@2 arguments ';' .

    $default  reduce using rule 16 (subprogram_head)


State 96

   14 subprogram_head: FUNCTION ID $@1 arguments ':' . standard_type ';'

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standard_type  go to state 105


State 97

    7 type: ARRAY '[' INUM DOTDOT . INUM ']' OF standard_type

    INUM  shift, and go to state 106


State 98

   36 expression_list: expression_list ',' expression .

    $default  reduce using rule 36 (expression_list)


State 99

   46 factor: ID '(' expression_list ')' .

    $default  reduce using rule 46 (factor)


State 100

   45 factor: ID '[' expression ']' .

    $default  reduce using rule 45 (factor)


State 101

   29 statement: IF expression THEN statement ELSE . statement

    BBEGIN  shift, and go to state 16
    ID      shift, and go to state 23
    IF      shift, and go to state 24
    WHILE   shift, and go to state 25

    compound_statement   go to state 26
    statement            go to state 107
    variable             go to state 30
    procedure_statement  go to state 31


State 102

   19 parameter_list: identifier_list ':' . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type           go to state 108
    standard_type  go to state 41


State 103

   17 arguments: '(' parameter_list ')' .

    $default  reduce using rule 17 (arguments)


State 104

   20 parameter_list: parameter_list ';' . identifier_list ':' type

    ID  shift, and go to state 6

    identifier_list  go to state 109


State 105

   14 subprogram_head: FUNCTION ID $@1 arguments ':' standard_type . ';'

    ';'  shift, and go to state 110


State 106

    7 type: ARRAY '[' INUM DOTDOT INUM . ']' OF standard_type

    ']'  shift, and go to state 111


State 107

   29 statement: IF expression THEN statement ELSE statement .

    $default  reduce using rule 29 (statement)


State 108

   19 parameter_list: identifier_list ':' type .

    $default  reduce using rule 19 (parameter_list)


State 109

    3 identifier_list: identifier_list . ',' ID
   20 parameter_list: parameter_list ';' identifier_list . ':' type

    ','  shift, and go to state 9
    ':'  shift, and go to state 112


State 110

   14 subprogram_head: FUNCTION ID $@1 arguments ':' standard_type ';' .

    $default  reduce using rule 14 (subprogram_head)


State 111

    7 type: ARRAY '[' INUM DOTDOT INUM ']' . OF standard_type

    OF  shift, and go to state 113


State 112

   20 parameter_list: parameter_list ';' identifier_list ':' . type

    ARRAY    shift, and go to state 37
    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    type           go to state 114
    standard_type  go to state 41


State 113

    7 type: ARRAY '[' INUM DOTDOT INUM ']' OF . standard_type

    INTEGER  shift, and go to state 38
    REAL     shift, and go to state 39

    standard_type  go to state 115


State 114

   20 parameter_list: parameter_list ';' identifier_list ':' type .

    $default  reduce using rule 20 (parameter_list)


State 115

    7 type: ARRAY '[' INUM DOTDOT INUM ']' OF standard_type .

    $default  reduce using rule 7 (type)
